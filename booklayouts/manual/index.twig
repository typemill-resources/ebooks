{% set language = ebookdata.language ? ebookdata.language : settings.langattr %}
<!DOCTYPE html>
<html lang="{{ language | default('en-gb') }}">
	<head>
		<meta charset="UTF-8">

		<title>{{ebookdata.title}}</title>

		<meta name="viewport" content="width=device-width, initial-scale=1.0" />

		<meta name="description" content="{{ metatabs.meta.description }}" />
		<meta name="author" content="{{ metatabs.meta.author }}" />
		<meta name="generator" content="Typemill" />

		<link rel="stylesheet" href="{{ base_url }}/plugins/ebooks/booklayouts/manual/layout-digital.css" />
		<link rel="stylesheet" href="{{ base_url }}/plugins/ebooks/booklayouts/manual/layout.css" />
	
		<style>
			:root {
			  --primary-bg-color: {{ ebookdata.primarycolor ? ebookdata.primarycolor : 'cadetblue' }};
			  --secondary-bg-color: {{ ebookdata.secondarycolor ? ebookdata.secondarycolor : 'cadetblue' }};
			  --primary-ft-color: {{ ebookdata.primaryfontcolor ? ebookdata.primaryfontcolor : 'white' }};
			  --secondary-ft-color: {{ ebookdata.secondaryfontcolor ? ebookdata.secondaryfontcolor : 'white' }};
			  --body-font: {{ ebookdata.fontbody ? ebookdata.fontbody : 'Open Sans' }};
			  --headline-font: {{ ebookdata.fontheadline ? ebookdata.fontheadline : 'Open Sans' }};
			  --font-size: {{ ebookdata.fontsize ? ebookdata.fontsize : '12' }}px;
			  --text-align: {{ ebookdata.textalign ? ebookdata.textalign : 'justify' }};
			  --hyphens: {{ ebookdata.hyphens ? ebookdata.hyphens : 'auto' }};
			}

			{% if ebookdata.hideemptypages %}
			
				/* remove empty pages */
				.tableofcontents, .bookcontent, .chapter, .subchapter, .bookcontent h1, .blurb {
				    break-before: page; /* page, right, left, recto, verso */
				}

			{% else %}

				/* add page breaks */
				.tableofcontents, .bookcontent, .chapter, .subchapter, .bookcontent h1, .blurb {
				    break-before: right; /* page, left, recto, verso */
				}
			
			{% endif %}


		</style>


		{% if thumbindex %} 
			<style>
				.thumbindex {
				  position: fixed;
				  display: flex;
				  visibility: hidden; /* hide the thumb index by default */
				  right: 0;
				  top: 0;
				  writing-mode: vertical-rl;
				  text-orientation: mixed;
				  list-style-type: none;
				  text-transform: uppercase;
				  font-family: sans-serif;
				  height: 100%;
				  flex-grow: 0;
				  align-items: flex-start;
				  margin: 0;
				  padding: 0;
				  background: inherit;
				}

				.thumbindex li {
				  padding: 0 0.5em;
				  height: {{ 100 / thumbindex|length }}%; /* calculate depending on the number of languages */
				  background: var(--secondary-bg-color);
				  text-align: center;
				  font-size: .8em;
				  box-sizing: border-box;
				  border-bottom: 1px solid white;
				  border-left: 1px solid #eee;
				}

				{% for thindex in thumbindex %}

					/*  Bind the language to a page model, per lang. This will create a class `pagedjs_XX` where XX is the value of the page property: .french will create .pagedjs_french */
					.{{ thindex.lang }} {
						page: {{ thindex.lang }};
					}
		
					/* Use the class created by pagedjs to target only the list element */
					.pagedjs_{{ thindex.lang }}_page .i-{{ thindex.lang }} {
						background: var(--primary-bg-color);
						color: var(--primary-ft-color);
					}

					/* Make the thumb-index visible */
					.pagedjs_{{ thindex.lang }}_page .thumbindex{
						visibility: visible;
					}
				{% endfor %}
			</style>
		{% endif %}

		{{ assets.renderCSS() }}

	</head>
	<body id="ebook" data-ebookdata="{{ ebookdata|json_encode|e('html_attr') }}">

		<div class="cover">
			{% if not ebookdata.coverimageonly %}
				<div class="cover-top"></div>
				<div class="cover-title">
					<h1 class="cover-headline">{{ ebookdata.title }}</h1>
					<h2 class="cover-subtitle">{{ ebookdata.subtitle }}</h2>
					{% if ebookdata.coverimage %} <img src="{{ base_url }}/{{ ebookdata.coverimage }} ">{% endif %}
				</div>
				<div class="cover-bottom">
					{% if ebookdata.logo != '' %}
						<img class="logo" src="{{ base_url }}/{{ ebookdata.logo }}">				
					{% else %}
						<p class="cover-author">{{ ebookdata.author }}</p>
					{% endif %}
					<p class="cover-edition">{{ ebookdata.edition }}</p>		
				</div>
			{% endif %}
		</div>

		<div class="imprint">
			<div class="imprint-bottom">

				{{ markdown(ebookdata.imprint) }}

			</div>
		</div>
		
		{% if ebookdata.toc %}
			<div class="tableofcontents">
				<h1>{{ ebookdata.toctitle }}</h1>
				<div id="toc"></div>
			</div>
		{% endif %}

		<div class="bookcontent">

			{% if thumbindex %}
				<ul class="thumbindex">
					{% for thindex in thumbindex %}
						<li class="i-{{ thindex.lang }}">{{ thindex.thumb }}</li>
					{% endfor %}
				</ul>
			{% endif %}

			{% for chapter in book %}

				{% if chapter.metadata.thumbindex %}

					<section class="subchapter {{ chapter.metadata.thumbindex.lang }}" lang="{{ chapter.metadata.thumbindex.lang|default(language) }}">
						{{ chapter.content }}
					</section>

				{% elseif chapter.level == 1 %}
					
					<section class="chapter">
						{{ chapter.content }}
					</section>

				{% else %}
						
					{{ chapter.content }}

				{% endif %}

			{% endfor %}
		
		</div>

		{% if ebookdata.blurb %}

			<div class="blurb">
				<div class="cover-top"></div>
				<div class="cover-title"></div>
				<div class="cover-bottom">
					{% if ebookdata.logo != '' %}
						<img class="logo" src="{{ base_url }}/{{ ebookdata.logo }}">				
					{% endif %}
					<div class="blurb-text">{{ markdown(ebookdata.blurb) }}</div>		
				</div>
			</div>
		
		{% endif %}

		<script>
			let ebookconfig = document.querySelector('#ebook');
			ebookdata = JSON.parse(ebookconfig.dataset.ebookdata);
		</script>

		{% block javascripts %}

			{{ assets.renderJS() }}
		
		{% endblock %}

		<script src="{{ base_url }}/plugins/ebooks/public/paged.polyfill.js"></script>
		<script>

			class handlers extends Paged.Handler {
				constructor(chunker, polisher, caller) {
				    super(chunker, polisher, caller);
				}

				beforeParsed(content){
					
					if(ebookdata.toc){
						createToc({
						    content: 		content,
						    tocElement: 	'#toc',
						    tocLevels: 		ebookdata.toclevel,
						    tocCounter: 	ebookdata.toccounter,
						    headlineArea:	'.bookcontent',
						});
					}
				}
			}
			Paged.registerHandlers(handlers);

		</script>
		
		{% if ebookdata.toc %}
			<script src="{{ base_url }}/plugins/ebooks/public/paged-toc.js"></script>
		{% endif %}

	</body>
</html>