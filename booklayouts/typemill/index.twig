{% set language = ebookdata.language ? ebookdata.language : settings.langattr %}
<!DOCTYPE html>
<html lang="{{ language | default('en-gb') }}">
	<head>
		<meta charset="UTF-8">

		<title>eBook Preview</title>

		<meta name="viewport" content="width=device-width, initial-scale=1.0" />

		<meta name="description" content="{{ metatabs.meta.description }}" />
		<meta name="author" content="{{ metatabs.meta.author }}" />
		<meta name="generator" content="Typemill" />

		<link rel="stylesheet" href="{{ base_url }}/plugins/ebooks/booklayouts/typemill/layout-digital.css" />
		<link rel="stylesheet" href="{{ base_url }}/plugins/ebooks/booklayouts/typemill/layout.css" />
		
		<style>
			:root {
			  --primary-bg-color: {{ ebookdata.primarycolor ? ebookdata.primarycolor : 'cadetblue' }};
			  --secondary-bg-color: {{ ebookdata.secondarycolor ? ebookdata.secondarycolor : 'cadetblue' }};
			}
			{% if ebookdata.coverimage %}
				.cover{
					background-image: url( {{ base_url }}/{{ ebookdata.coverimage }} );
				}
			{% endif %}
		</style>

		{% if ebookdata.toccounter %}
			<style>

				/* add chapter/headline counters before headline text */
				#list-toc-generated{ 
				    counter-reset: counterTocLevel1; 
				}
				#list-toc-generated .toc-element-level-1{ 
				    counter-increment: counterTocLevel1; 
				    counter-reset: counterTocLevel2; 
				}
				#list-toc-generated .toc-element-level-2{ 
				    counter-reset: counterTocLevel3; 
				}
				#list-toc-generated .toc-element-level-1::before{ 
				    content: counter(counterTocLevel1) ".";
				    padding-right: 5px;
				}
				#list-toc-generated .toc-element-level-2{ 
				    counter-increment: counterTocLevel2; 
				}
				#list-toc-generated .toc-element-level-2::before{ 
				    content: counter(counterTocLevel1) "." counter(counterTocLevel2);
				    padding-right: 5px;
				}
				#list-toc-generated .toc-element-level-3{ 
				    counter-increment: counterTocLevel3; 
				}
				#list-toc-generated .toc-element-level-3::before{ 
				    content: counter(counterTocLevel1) "." counter(counterTocLevel2) "." counter(counterTocLevel3);
				    padding-right: 5px;
				}
				#list-toc-generated .toc-element-level-4{ 
				    counter-increment: counterTocLevel4; 
				}
				#list-toc-generated .toc-element-level-4::before{ 
				    content: counter(counterTocLevel1) "." counter(counterTocLevel2) "." counter(counterTocLevel3) "." counter(counterTocLevel4);
				    padding-right: 5px;
				}
			</style>
		{% endif %}


		<!-- add styles for thumb index -->

		{% if book.thumbindex %}
			<style>
				.thumbindex {
				  position: fixed;
				  display: flex;
				  visibility: hidden; /* hide the thumb index by default */
				  right: 0;
				  top: 0;
				  writing-mode: vertical-rl;
				  text-orientation: mixed;
				  list-style-type: none;
				  text-transform: uppercase;
				  font-family: sans-serif;
				  height: 100%;
				  flex-grow: 0;
				  align-items: flex-start;
				  margin: 0;
				  padding: 0;
				  background: inherit;
				}

				.thumbindex li {
				  padding: 0 0.5em;
				  height: {{ 100 / book.thumbindex|length }}%; /* calculate depending on the number of languages */
				  background: gainsboro;
				  text-align: center;
				  box-sizing: border-box;
				  border-bottom: 1px solid white;
				}

				{% for thumbindex in book.thumbindex %}

					/*  Bind the language to a page model, per lang. This will create a class `pagedjs_XX` where XX is the value of the page property: .french will create .pagedjs_french */
					.{{ thumbindex.lang }} {
						page: {{ thumbindex.lang }};
					}
		
					/* Use the class created by pagedjs to target only the list element */
					.pagedjs_{{ thumbindex.lang }}_page .i-{{ thumbindex.lang }} {
						background: black;
						color: white;
					}

					/* Make the thumb-index visible */
					.pagedjs_{{ thumbindex.lang }}_page .thumbindex{
						visibility: visible;
					}
				{% endfor %}
			</style>
		{% endif %}

	</head>
	<body id="ebook" data-ebookdata="{{ ebookdata|json_encode|e('html_attr') }}">

		<div class="cover">
			{% if not ebookdata.coverimageonly %}
				<div class="cover-top">
					<h1 class="cover-title">{{ ebookdata.title }}</h1>		
				</div>
				<div class="cover-bottom">
					<h2 class="cover-subtitle">{{ ebookdata.subtitle }}</h2>
					<p class="cover-author">{{ ebookdata.author }}</p>
					<p class="cover-edition">{{ ebookdata.edition }}</p>		
				</div>
			{% endif %}
		</div>

		<div class="imprint">
			{% set booklayout = ebookdata.booklayouts[ebookdata.layout] %}
			<div class="imprint-top">
				<p>Book layout: Â© {{ booklayout.Name }} ({{ booklayout.Link }}) Licence: {{ booklayout.Licence }}<br/>
				Created with https://typemill.net</p>
			</div>
			<div class="imprint-bottom">

				{{ markdown(ebookdata.imprint) }}

			</div>
		</div>
		
		{% if ebookdata.toc %}
			<div class="tableofcontents">
				<h1>{{ ebookdata.toctitle }}</h1>
				<div id="toc"></div>
			</div>
		{% endif %}

		<div class="bookcontent">

			<!-- add thumb index -->
			{% if book.thumbindex %}
				<ul class="thumbindex">
					{% for thumbindex in book.thumbindex %}
						<li class="i-{{ thumbindex.lang }}">{{ thumbindex.thumb }}</li>
					{% endfor %}
				</ul>
			{% endif %}

			{% for chapter in book %}
		
				{% if chapter.level == 1 %}
					
					<section class="chapter">
						{{ chapter.content }}
					</section>

				{% else %}
				
					<section class="subchapter {{ chapter.metadata.language.lang }}" lang="{{ chapter.metadata.language.lang|default(language) }}">
						{{ chapter.content }}
					</section>

				{% endif %}
		
			{% endfor %}
		</div>

		{% if ebookdata.endnotes %}

			<div id="endnotes">
				<h1>{{ebookdata.endnotestitle}}</h1>
			</div>
		
		{% endif %}

		{% if ebookdata.blurb %}

			<div class="blurb">
				{{ markdown(ebookdata.blurb) }}
			</div>
		
		{% endif %}

		<script>
			let ebookconfig = document.querySelector('#ebook');
			ebookdata = JSON.parse(ebookconfig.dataset.ebookdata);
		</script>

		{% if ebookdata.hyphens %}
			<script>

		        var Hyphenopoly = {

			        require: {
		        	
			        	{% if book.thumbindex %}
							{% for thumbindex in book.thumbindex %}
				                "{{ thumbindex.lang }}": "FORCEHYPHENOPOLY",								
							{% endfor %}
			        	{% else %}
				                "{{ language }}": "{{ ebookdata.hyphentest }}"
			        	{% endif %}
			        
			        },
		            paths: {
		                patterndir: "{{ base_url }}/plugins/ebooks/public/hyphens/patterns/",
		                maindir: "{{ base_url }}/plugins/ebooks/public/hyphens/"
		            },
		            setup: {
		                defaultLanguage: "en-gb",
		              	dontHyphenate: {
		              		h1: true,
		              		h2: true,
		              		h3: true,
		              		h4: true,
		              		h5: true,
		              		h6: true,
	           	 			video: true,
	            			audio: true,
	            			script: true,
	            			code: true,
	            			pre: true,
	            			img: true,
	            			br: true,
	            			samp: true,
	            			kbd: true,
	            			var: true,
	            			abbr: true,
	            			acronym: true,
	            			sub: true,
	            			sup: true,
	            			button: true,
	            			option: true,
	            			label: true,
	            			textarea: true,
	            			input: true,
	            			math: true,
	            			svg: true,
	            			style: true
	        			},
		                selectors: {
		                    ".bookcontent": {}
		                }
		            },
			       	handleEvent: {
			            hyphenopolyEnd: function (e) {
			              let previewer = new Paged.Previewer();
			              previewer.preview();
			            }
			        }
		        };

				window.PagedConfig = {
					auto: false
				}
			</script>
	        <script src="{{ base_url }}/plugins/ebooks/public/hyphens/Hyphenopoly_Loader.js"></script>
		{% endif %}

		{% block javascripts %}

			{{ assets.renderJS() }}
		
		{% endblock %}

		{% if ebookdata.endnotes %}
			<script src="{{ base_url }}/plugins/ebooks/public/endnotes.js"></script>
			<script>
				endnotes('#endnotes');
			</script>
		{% endif %}
		<script src="{{ base_url }}/plugins/ebooks/public/paged.polyfill.js"></script>
		<script>
			class handlers extends Paged.Handler {
				constructor(chunker, polisher, caller) {
				    super(chunker, polisher, caller);
				}

				beforeParsed(content){

					if(ebookdata.toc){
						createToc({
						    content: content,
						    tocElement: '#toc',
							titleElements: tocHeadlines
						});
					}
				}
			}
			Paged.registerHandlers(handlers);

		</script>

		{% if ebookdata.toc %}
			<script src="{{ base_url }}/plugins/ebooks/public/paged-toc.js"></script>
			<script>
			 
				 var tocHeadlines = [];
				 var tocLevels = ebookdata.toclevel;
				 for(var i = 1; i <= tocLevels; i++)
				 {
				 	tocHeadlines.push('.bookcontent h'+i);
				 }

			</script>
		{% endif %}

	</body>
</html>